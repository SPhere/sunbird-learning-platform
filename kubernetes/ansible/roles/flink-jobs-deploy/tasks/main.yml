- name: template values.yaml file
  template:
    src: "{{ chart_path }}/values.j2"
    dest: "{{ chart_path }}/values.yaml"

- name: template values.yaml file
  template:
    src: "{{ chart_path }}/values.j2"
    dest: "{{ chart_path }}/values.yaml"

- name: template configmap file
  template:
    src: "{{ template_env_file_name }}"
    dest: "{{ helm_env_file_name }}"

#- name: create env configmap
#  shell: find "{{ helm_env_file_location }}" -iname "*.env" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-config --from-env-file={} -n {{namespace}} --dry-run -o=yaml | kubectl apply -f - " \;

- name: create env configmap
  shell: find "{{ helm_env_file_location }}" -iname "*.env" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-config --from-env-file={} -n {{namespace}} --dry-run -o=yaml | kubectl apply -f - " \;


- name: remove env configmap file
  file:
   path: "{{ helm_env_file_name }}"
   state: absent
   
- name: remove the job.batch
  shell: kubectl delete job.batch {{ item }}-jobmanager -n {{ flink_namespace }}
  with_items:
    - "{{ job_names_to_deploy.split(',')|list }}"
  ignore_errors: yes

- name: helm upgrade
  shell: helm upgrade --install {{ item }} {{ chart_path }} --set job_classname={{ flink_job_names['%s'|format(item)].job_class_name }} --set taskmanager.replicas={{ flink_job_names['%s'|format(item)].replica }} --set taskmanager.cpu_requests={{ flink_job_names['%s'|format(item)].cpu_requests }} -n {{ flink_namespace }}
  with_items:
    - "{{ job_names_to_deploy.split(',')|list }}"
